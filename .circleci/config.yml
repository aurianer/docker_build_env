# Copyright (c) 2018 Thomas Heller
#               2018 Patrick Diehl
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

version: 2
jobs:
    build:
        docker:
            - image: docker:17.05.0-ce-git
        environment:
            IMAGE_FOLDER_NAME: hpx_build_env
            IMAGE_NAME_LATEST: stellargroup/build_env:latest
            IMAGE_NAME_VERSIONED: stellargroup/build_env:2
        steps:
            - tag_update
            - checkout
            - setup_remote_docker
            - run:
                name: Tag Update Verification
                command: |
                    hub_url=https://registry.hub.docker.com/v1/repositories/"stellargroup/build_env"/tags
                    current_tag=$(wget -q $hub_url -O -  | tr '},' '\n' | sed '/name/!d' | sed -E "s/(.*)name\": \"([^\"]*)\"/\2/" | sed '/^[a-Z]/d' | sort | tail -1)
                    updated_tag=$(echo ${IMAGE_NAME_VERSIONED} | cut -d: -f2)
                    if [[ $current_tag == $updated_tag ]]; then
                        echo "Please update the tag of the image, an image with this speific tag already exists."
                        exit 1
                    fi
            - run:
                name: Building Docker Image
                command: |
                    docker build -t ${IMAGE_NAME_LATEST} ${IMAGE_FOLDER_NAME}
                    docker tag ${IMAGE_NAME_LATEST} ${IMAGE_NAME_VERSIONED}
                    docker images
            - run:
                name: Testing Docker Image
                command: |
                    docker run ${IMAGE_NAME_LATEST} cmake --version
                    git clone https://github.com/STEllAR-GROUP/hpx.git --depth=1
                    docker run ${IMAGE_NAME_LATEST} printenv
                    docker create -v /hpx --name app ${IMAGE_NAME_LATEST} /bin/true
                    docker cp /root/project/hpx/./ app:/hpx
                    docker run --volumes-from app ${IMAGE_NAME_LATEST} mkdir /hpx/build
                    docker run --volumes-from app -w /hpx/build ${IMAGE_NAME_LATEST} cmake .. -DHPX_WITH_MALLOC=jemalloc -G Ninja
                    docker run --volumes-from app -w /hpx/build ${IMAGE_NAME_LATEST} ninja core
            - deploy:
                command: |
                    if [ "${CIRCLE_BRANCH}" == "master" ]; then
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker push ${IMAGE_NAME_LATEST}
                        docker push ${IMAGE_NAME_VERSIONED}
                    fi
